{"name":"MoteCloud","tagline":"Large scale ambient sensing","body":"# About to MoteCloud  \r\n\r\nThe integration of WSNs with back-end monitoring and management systems delivers the full value of them to enterprises \r\nand makes the connection of the physical world with the internet a reality, enabling the next-generation environmental \r\nscience. The cloud computing concept is being used to define an Internet-based computing paradigm where shared resources, \r\nsoftware, and information are provided to computers and other devices on demand. This can be applied to ambient \r\nmonitoring with wireless sensor networks.  \r\n\r\n![](https://github.com/jadianes/mote-cloud/blob/master/resources/body_pic.png?raw=true)\r\n\r\nHowever, the degree of heterogeneity and scalability, together with the quality of service and event-based style of \r\ninteraction typical of these scenarios, requires of specific supporting technologies if we want to provide an \r\neffective and competitive solution.  \r\n\r\nMoteCloud is a DDS-based system for cloud monitoring of wireless sensor networks. DDS provides the high-performance \r\nand quality-enabled data and event distribution infrastructure. Extended with an XMPP-based protocol, it supports\r\nan architecture that allows creating a global data space for dynamically integrate WSNs located at different \r\nInternet points, in a P2P style. Moreover, MoteCloud provides a set of user applications to perform the most usual \r\nand useful tasks required in ambient monitoring and that can be deployed in any location with Internet access.  \r\n\r\n## Architecture drivers  \r\n\r\nSeveral quality attributes have shaped the MoteCloud architecture:  \r\n\r\n- Heterogeneity: MC have to deal with different WSN platforms. This is achieved by the Sink API that translates\r\nWSN data to the DDS global data space. New modules can be developed using this API.  \r\n\r\n- Performance: data must be delivered when generated, from WSN to applications. The applications do not need to check \r\nfor new data all the time. Moreover, data quality of service (e.g. lost samples) have to be monitored. We achieve that \r\nusing DDS quality of service parameters, its publish/subscribe model, and a \"push\" Web protocol (XMPP). Moreover, \r\nwe avoid using centralized servers that can be overloaded, compromising performance. Our clouds have a P2P architecture.  \r\n\r\n- Reliability: avoid single points of failure that could prevent applications to receive data. Our clouds have a P2P \r\narchitecture. When a WSN fails, others keep serving its data to applications. There are not centralized servers that \r\ncould stop the whole system from working.  \r\n\r\n- Scalability: the architecture must be able to support locations with lots of data an requests. We achieve this using \r\na DDS-distributed kernel in each location, that allows load-balancing thanks to its publish/susbcribe model and \r\ndistributed global data space concept.   \r\n\r\n- Dynamicity: the system must be able to change on run time either incorporating new WSN or new applications. This \r\nis achieved thanks to its microkernel architecture, where new modules can be plugged into the DDS backbone. \r\nMoreover, applications can appear at any moment since they use either the same DDS backbone or the XMPP Web protocol.  \r\n\r\n- Complex event processing: an important part of monitoring applications is being able to define and detect complex \r\nevents. This is achieved by introducing the concept of Complex Event Processor. A CEP is built on top of the DDS \r\npublish-subscribe model and incorporates user-defined routines.  \r\n\r\n- Extensibility: MoteCloud must evolve, incorporating new WSN and new applications. It must promote a community based\r\ndevelopment. This is done by using standards. New WSNs are incorporated developing simple Java modules that use \r\nthe Sink API (it has three operations) to put data in the DDS global data space. Web applications only have to deal \r\nwith the XMPP standard protocol. Therefore, extensibility points are well defined, and are mostly based on standard \r\ntechnologies.  \r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}