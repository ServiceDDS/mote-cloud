/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ParticipantsJFrame.java
 *
 * Created on 29-mar-2010, 18:02:35
 */

package virtual_control_room;

import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import samples.Sample;
import virtual_control_room.mote_table.Mote;
import virtual_control_room.mote_table.MoteTable;
import virtual_control_room.mote_table.MoteTableObserver;
import virtual_control_room.mote_table.Sensor;

/**
 *
 * @author JA Dianes
 */
public class ParticipantMotesJFrame extends javax.swing.JFrame implements MoteTableObserver, ListSelectionListener {

    MoteTable moteTable = new MoteTable();

    /*
    Peer myPeer;
    ServiceTopic moteServiceTopic;
    ServiceTopic alarmServiceTopic; //??
*/
    /** Creates new form ParticipantsJFrame */
    public ParticipantMotesJFrame() {
        initComponents();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.motesjList.setModel(new DefaultListModel());
        moteTable.addObserver(this);
        this.motesjList.addListSelectionListener(this);
  /*
        myPeer = new Peer("ParticipantsView"); // Create my Peer
        myPeer.joinGroup(new Group("HABITAT")); // Join to HABITAT group
        // Now, create some service-topics for listening for participants
        try {
            this.moteServiceTopic = this.myPeer.newServiceTopic(new SampleTopic(), "SampleTopic",null,null);
            this.moteServiceTopic.addListener(this);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Beholder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Beholder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Beholder.class.getName()).log(Level.SEVERE, null, ex);
        }
   */
   }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        participantsViewjPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        motesjList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        motejTree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(motesjList);

        javax.swing.GroupLayout participantsViewjPanelLayout = new javax.swing.GroupLayout(participantsViewjPanel);
        participantsViewjPanel.setLayout(participantsViewjPanelLayout);
        participantsViewjPanelLayout.setHorizontalGroup(
            participantsViewjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
        );
        participantsViewjPanelLayout.setVerticalGroup(
            participantsViewjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        motejTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(motejTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(participantsViewjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(participantsViewjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ParticipantMotesJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree motejTree;
    private javax.swing.JList motesjList;
    private javax.swing.JPanel participantsViewjPanel;
    // End of variables declaration//GEN-END:variables

    void newSample(Sample sample) {
        // Update views
        if (this.moteTable.containsMote("mote."+sample.moteID)) {
            if (!this.moteTable.containsMoteSensor("mote."+sample.moteID,sample.key)) {
                Sensor newSensor = new Sensor();
                newSensor.variableName = sample.key;
                this.moteTable.newMoteSensor("mote."+sample.moteID, newSensor);
            }
        } else {
            Mote newMote = new Mote("mote."+sample.moteID);
            this.moteTable.newMote(newMote);
            Sensor newSensor = new Sensor();
            newSensor.variableName = sample.key;
            this.moteTable.newMoteSensor("mote."+sample.moteID, newSensor);
        }
    }

    public void tableChanged(Mote mote) {
        System.out.println("ParticipantMotesJFrame.newMote(): new mote detected...");
        ((DefaultListModel)this.motesjList.getModel()).removeAllElements();
        Iterator<Mote> it = this.moteTable.values().iterator();
        while (it.hasNext()) {
            Mote m = it.next();
            ((DefaultListModel)this.motesjList.getModel()).addElement(m);
        }
    }

    public void valueChanged(ListSelectionEvent e) {
        Mote m = (Mote)this.motesjList.getSelectedValue();
        DefaultMutableTreeNode top = new DefaultMutableTreeNode(m.moteId);
        DefaultTreeModel treeModel = new DefaultTreeModel(top);
        this.addSensors(top,m);
        this.motejTree.setModel(treeModel);
    }

    private void addSensors(DefaultMutableTreeNode top, Mote m) {
        DefaultMutableTreeNode sensor;
        DefaultMutableTreeNode variable;
        DefaultMutableTreeNode rate;
        if (m.sensors != null) {
            Iterator<Sensor> it = m.sensors.values().iterator();
            while (it.hasNext()) {
                Sensor newSensor = it.next();
                sensor = new DefaultMutableTreeNode(newSensor.variableName+" sensor");
                variable = new DefaultMutableTreeNode("Variable: "+newSensor.variableName);
                rate = new DefaultMutableTreeNode("Sample rate: "+newSensor.sampleRate);
                sensor.add(variable);
                sensor.add(rate);
                top.add(sensor);
            }
        }
    }

}
